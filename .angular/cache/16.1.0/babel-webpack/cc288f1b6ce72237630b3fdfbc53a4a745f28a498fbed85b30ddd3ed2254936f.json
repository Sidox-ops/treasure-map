{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/adventurer/service/adventurer.service\";\nexport class MapService {\n  constructor(\n  //injection de adventureService\n  adventureService) {\n    this.adventureService = adventureService;\n    this.mapSubject = new Subject();\n    this.map$ = this.mapSubject.asObservable();\n    this.adventurers = [];\n    // Appelons la fonction initializeMap dans le constructeur\n    this.initializeMap(3, 4); // 3: largeur, 4: hauteur\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  initializeFromText(content) {\n    const lines = content.split('\\n');\n    for (let line of lines) {\n      const parts = line.split(' - ');\n      switch (parts[0]) {\n        case 'C':\n          this.createMap(parseInt(parts[1]), parseInt(parts[2]));\n          break;\n        case 'M':\n          this.addMountain(parseInt(parts[1]), parseInt(parts[2]));\n          break;\n        case 'T':\n          this.addTreasure(parseInt(parts[1]), parseInt(parts[2]), parseInt(parts[3]));\n          break;\n        case 'A':\n          this.addAdventurer(parts[1], parseInt(parts[2]), parseInt(parts[3]), parts[4], parts[5]);\n          break;\n      }\n    }\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  initializeMap(width, height) {\n    this.map = new Array(height).fill(null).map(() => new Array(width).fill('P'));\n    // Ajoutons quelques montagnes et trésors pour tester\n    this.map[1][1] = 'M'; // M pour Montagne\n    this.map[2][2] = 'M'; // Une autre Montagne\n    this.map[0][3] = {\n      type: 'T',\n      treasures: 2\n    }; // T pour Trésor avec 2 trésors\n    this.map[1][3] = {\n      type: 'T',\n      treasures: 1\n    }; // Un autre Trésor avec 1 trésor\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  getMap() {\n    return this.map;\n  }\n  createMap(width, height) {\n    this.map = new Array(height);\n    for (let i = 0; i < height; i++) {\n      this.map[i] = new Array(width).fill('.');\n    }\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  addMountain(x, y) {\n    if (this.map[y] && this.map[y][x] !== undefined) {\n      this.map[y][x] = 'M';\n    }\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  addTreasure(x, y, count) {\n    if (this.map[y] && this.map[y][x] !== undefined) {\n      this.map[y][x] = `T(${count})`;\n    }\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  addAdventurer(name, x, y, orientation, sequence) {\n    const movements = sequence.split('');\n    this.adventureService.addAdventurer(name, x, y, orientation, movements);\n  }\n}\nMapService.ɵfac = function MapService_Factory(t) {\n  return new (t || MapService)(i0.ɵɵinject(i1.AdventureService));\n};\nMapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MapService,\n  factory: MapService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Subject","MapService","constructor","adventureService","mapSubject","map$","asObservable","adventurers","initializeMap","next","map","initializeFromText","content","lines","split","line","parts","createMap","parseInt","addMountain","addTreasure","addAdventurer","width","height","Array","fill","type","treasures","getMap","i","x","y","undefined","count","name","orientation","sequence","movements","i0","ɵɵinject","i1","AdventureService","factory","ɵfac","providedIn"],"sources":["/Users/sidox/dev/treasure-map/src/app/map/service/map.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { AdventureService } from 'src/app/adventurer/service/adventurer.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n  private mapSubject = new Subject<any[][]>();\n  map$ = this.mapSubject.asObservable();\n\n  map!: any[][];\n  adventurers: any[] = [];\n\n  constructor(//injection de adventureService\n    private adventureService: AdventureService\n  ) {\n    // Appelons la fonction initializeMap dans le constructeur\n    this.initializeMap(3, 4); // 3: largeur, 4: hauteur\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  initializeFromText(content: string) {\n    const lines = content.split('\\n');\n    for (let line of lines) {\n      const parts = line.split(' - ');\n\n      switch (parts[0]) {\n        case 'C':\n          this.createMap(parseInt(parts[1]), parseInt(parts[2]));\n          break;\n        case 'M':\n          this.addMountain(parseInt(parts[1]), parseInt(parts[2]));\n          break;\n        case 'T':\n          this.addTreasure(parseInt(parts[1]), parseInt(parts[2]), parseInt(parts[3]));\n          break;\n        case 'A':\n          this.addAdventurer(parts[1], parseInt(parts[2]), parseInt(parts[3]), parts[4], parts[5]);\n          break;\n      }\n    }\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  initializeMap(width: number, height: number) {\n    this.map = new Array(height).fill(null).map(() => new Array(width).fill('P'));\n\n    // Ajoutons quelques montagnes et trésors pour tester\n    this.map[1][1] = 'M'; // M pour Montagne\n    this.map[2][2] = 'M'; // Une autre Montagne\n    this.map[0][3] = { type: 'T', treasures: 2 }; // T pour Trésor avec 2 trésors\n    this.map[1][3] = { type: 'T', treasures: 1 }; // Un autre Trésor avec 1 trésor\n\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  getMap() {\n    return this.map;\n  }\n\n  createMap(width: number, height: number) {\n    this.map = new Array(height);\n    for (let i = 0; i < height; i++) {\n      this.map[i] = new Array(width).fill('.');\n    }\n\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  addMountain(x: number, y: number) {\n    if (this.map[y] && this.map[y][x] !== undefined) {\n      this.map[y][x] = 'M';\n    }\n\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  addTreasure(x: number, y: number, count: number) {\n    if (this.map[y] && this.map[y][x] !== undefined) {\n      this.map[y][x] = `T(${count})`;\n    }\n\n    this.mapSubject.next(this.map); // Notifier de la nouvelle carte\n  }\n\n  addAdventurer(name: string, x: number, y: number, orientation: string, sequence: string) {\n    const movements = sequence.split('');\n    this.adventureService.addAdventurer(name, x, y, orientation, movements);\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}