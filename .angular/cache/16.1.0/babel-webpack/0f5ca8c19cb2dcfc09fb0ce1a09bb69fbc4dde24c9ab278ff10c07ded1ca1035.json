{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let MapComponent = class MapComponent {\n  constructor(mapService, adventureService) {\n    this.mapService = mapService;\n    this.adventureService = adventureService;\n  }\n  ngOnInit() {\n    this.mapService.map$.subscribe(map => this.map = map);\n    this.adventureService.adventurers$.subscribe(adventurers => {\n      this.adventurers = adventurers;\n    });\n    this.simulateAdventure();\n  }\n  getCellStyle(cell, x, y) {\n    if (this.adventurers.some(a => a.x === x && a.y === y)) {\n      return 'adventurer';\n    } else if (cell === 'P') {\n      return 'plain';\n    } else if (cell === 'M') {\n      return 'mountain';\n    } else if (cell.type === 'T') {\n      return 'treasure';\n    }\n    return '';\n  }\n  simulateAdventure() {\n    for (const adventurer of this.adventurers) {\n      for (const movement of adventurer.movements) {\n        if (movement === 'A') {\n          // Compute next position based on orientation\n          let nextPos = this.getNextPosition(adventurer.x, adventurer.y, adventurer.orientation);\n          // If it's a valid move (not a mountain or outside the map), move the adventurer\n          if (this.isValidMove(nextPos.x, nextPos.y)) {\n            adventurer.x = nextPos.x;\n            adventurer.y = nextPos.y;\n            // If it's a treasure, increment the adventurer's treasure count\n            if (this.map[adventurer.y][adventurer.x] && this.map[adventurer.y][adventurer.x].type === 'T') {\n              adventurer.treasures++;\n              this.map[adventurer.y][adventurer.x].treasures--;\n              if (this.map[adventurer.y][adventurer.x].treasures === 0) {\n                // If no more treasures, revert to normal ground\n                this.map[adventurer.y][adventurer.x] = 'P';\n              }\n            }\n          } else {\n            // If not a valid move, do nothing\n            'Invalid move';\n          }\n        } else {\n          // Update orientation based on whether adventurer is turning right ('D') or left ('G')\n          adventurer.orientation = this.updateOrientation(adventurer.orientation, movement);\n        }\n      }\n    }\n    return 'Adventure completed :' + this.adventurers.map(a => a.name + ' has ' + a.treasures + ' treasures').join(', ');\n  }\n  getNextPosition(x, y, orientation) {\n    switch (orientation) {\n      case 'N':\n        return {\n          x: x,\n          y: y - 1\n        };\n      case 'S':\n        return {\n          x: x,\n          y: y + 1\n        };\n      case 'E':\n        return {\n          x: x + 1,\n          y: y\n        };\n      case 'W':\n        return {\n          x: x - 1,\n          y: y\n        };\n      default:\n        return {\n          x: x,\n          y: y\n        };\n    }\n  }\n  isValidMove(x, y) {\n    return x >= 0 && y >= 0 && y < this.map.length && x < this.map[0].length && (this.map[y][x] === 'P' || this.map[y][x].type && this.map[y][x].type === 'T');\n  }\n  updateOrientation(currentOrientation, turn) {\n    const orientations = ['N', 'E', 'S', 'W'];\n    let currentIndex = orientations.indexOf(currentOrientation);\n    if (turn === 'D') {\n      currentIndex = (currentIndex + 1) % orientations.length;\n    } else if (turn === 'G') {\n      currentIndex = (currentIndex - 1 + orientations.length) % orientations.length;\n    }\n    return orientations[currentIndex];\n  }\n};\nMapComponent = __decorate([Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.css']\n})], MapComponent);","map":{"version":3,"names":["Component","MapComponent","constructor","mapService","adventureService","ngOnInit","map$","subscribe","map","adventurers$","adventurers","simulateAdventure","getCellStyle","cell","x","y","some","a","type","adventurer","movement","movements","nextPos","getNextPosition","orientation","isValidMove","treasures","updateOrientation","name","join","length","currentOrientation","turn","orientations","currentIndex","indexOf","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/sidox/dev/treasure-map/src/app/map/map.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MapService } from './service/map.service';\nimport { AdventureService } from '../adventurer/service/adventurer.service';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.css']\n})\nexport class MapComponent implements OnInit {\n\n  map!: any[][];\n  adventurers!: any[];\n  result!: string;\n\n  constructor(\n    private mapService: MapService,\n    private adventureService: AdventureService\n  ) { }\n\n  ngOnInit(): void {\n    this.mapService.map$.subscribe(map => this.map = map);\n    this.adventureService.adventurers$.subscribe(adventurers => {\n      this.adventurers = adventurers;\n    });\n    this.simulateAdventure();\n  }\n\n  getCellStyle(cell: any, x: number, y: number) {\n    if (this.adventurers.some(a => a.x === x && a.y === y)) {\n      return 'adventurer';\n    } else if (cell === 'P') {\n      return 'plain';\n    } else if (cell === 'M') {\n      return 'mountain';\n    } else if (cell.type === 'T') {\n      return 'treasure';\n    }\n\n    return '';\n  }\n\n  simulateAdventure() {\n    for (const adventurer of this.adventurers) {\n      for (const movement of adventurer.movements) {\n        if (movement === 'A') {\n          // Compute next position based on orientation\n          let nextPos = this.getNextPosition(adventurer.x, adventurer.y, adventurer.orientation);\n          // If it's a valid move (not a mountain or outside the map), move the adventurer\n          if (this.isValidMove(nextPos.x, nextPos.y)) {\n            adventurer.x = nextPos.x;\n            adventurer.y = nextPos.y;\n            // If it's a treasure, increment the adventurer's treasure count\n            if (this.map[adventurer.y][adventurer.x] && this.map[adventurer.y][adventurer.x].type === 'T') {\n              adventurer.treasures++;\n              this.map[adventurer.y][adventurer.x].treasures--;\n              if (this.map[adventurer.y][adventurer.x].treasures === 0) {\n                // If no more treasures, revert to normal ground\n                this.map[adventurer.y][adventurer.x] = 'P';\n              }\n            }\n          } else {\n            // If not a valid move, do nothing\n            'Invalid move';\n          }\n        } else {\n          // Update orientation based on whether adventurer is turning right ('D') or left ('G')\n          adventurer.orientation = this.updateOrientation(adventurer.orientation, movement);\n        }\n      }\n    }\n    return 'Adventure completed :' + this.adventurers.map(a => a.name + ' has ' + a.treasures + ' treasures').join(', ');\n  }\n\n  getNextPosition(x: number, y: number, orientation: string) {\n    switch (orientation) {\n      case 'N':\n        return { x: x, y: y - 1 };\n      case 'S':\n        return { x: x, y: y + 1 };\n      case 'E':\n        return { x: x + 1, y: y };\n      case 'W':\n        return { x: x - 1, y: y };\n      default:\n        return { x: x, y: y };\n    }\n  }\n\n  isValidMove(x: number, y: number) {\n    return (\n      x >= 0 &&\n      y >= 0 &&\n      y < this.map.length &&\n      x < this.map[0].length &&\n      (this.map[y][x] === 'P' || (this.map[y][x].type && this.map[y][x].type === 'T'))\n    );\n  }\n\n  updateOrientation(currentOrientation: string, turn: string) {\n    const orientations = ['N', 'E', 'S', 'W'];\n    let currentIndex = orientations.indexOf(currentOrientation);\n    if (turn === 'D') {\n      currentIndex = (currentIndex + 1) % orientations.length;\n    } else if (turn === 'G') {\n      currentIndex = (currentIndex - 1 + orientations.length) % orientations.length;\n    }\n    return orientations[currentIndex];\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}